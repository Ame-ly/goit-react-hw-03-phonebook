{"version":3,"sources":["Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","onChange","evt","setState","currentTarget","value","onSubmit","preventDefault","props","this","type","pattern","title","required","Component","ContactItem","contacts","onClickDelete","map","id","onClick","ContactList","Filter","defaultProps","App","filter","addContact","contact","shortid","generate","find","cont","alert","deleteContact","filterFind","doItemToLowerCase","toLowerCase","includes","JSON","parse","localStorage","getItem","prevState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.decc8771.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onChange = evt =>\r\n    this.setState({ [evt.currentTarget.name]: evt.currentTarget.value });\r\n\r\n  onSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.onChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.onChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ contacts, onClickDelete }) =>\r\n  contacts.map(({ id, name, number }) => (\r\n    <li key={id}>\r\n      <button onClick={() => onClickDelete(id)} type=\"button\">\r\n        delete\r\n      </button>\r\n      {name}: {number}\r\n    </li>\r\n  ));\r\n\r\nContactItem.propTypes = {\r\n  onClickDelete: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired))\r\n    .isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\n\r\nconst ContactList = ({ contacts, onClickDelete }) => (\r\n  <ul>\r\n    <ContactItem contacts={contacts} onClickDelete={onClickDelete} />\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onClickDelete: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired))\r\n    .isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      Find your contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\r\n\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\n\r\nimport shortid from 'shortid';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contacts = JSON.parse(localStorage.getItem(\"contacts\"))\r\n    if (contacts) {\r\n      this.setState({ contacts: contacts })\r\n    }\r\n    // console.log(contacts);\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState.contacts !== this.state.contacts)\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts))\r\n  }\r\n\r\n  addContact = ({ name, number }) => {\r\n    const { contacts } = this.state;\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    contacts.find(cont => cont.name === name)\r\n      ? alert(`${name} is already in contacts`)\r\n      : this.setState(({ contacts }) => ({\r\n        contacts: [contact, ...contacts],\r\n      }));\r\n  };\r\n\r\n  deleteContact = id => {\r\n    this.setState(({ contacts }) => {\r\n      const searchContact = contacts.filter(contact => contact.id !== id);\r\n      return { contacts: searchContact };\r\n    });\r\n  };\r\n\r\n  filterFind = evt => this.setState({ filter: evt.currentTarget.value });\r\n\r\n  doItemToLowerCase = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter(cont =>\r\n      cont.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmit={this.addContact} />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter value={this.state.filter} onChange={this.filterFind} />\r\n        <ContactList\r\n          contacts={this.doItemToLowerCase()}\r\n          onClickDelete={this.deleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}